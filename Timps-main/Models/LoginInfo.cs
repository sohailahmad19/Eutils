// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TIMPS.Model;
//
//    var loginInfo = LoginInfo.FromJson(jsonString);

namespace TekTrackingCore.Model
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System;
    using System.Collections.Generic;

    using System.Globalization;


    public partial class LoginInfo
    {
        [JsonProperty("result")]
        public Result Result { get; set; }

        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("notifications")]
        public List<object> Notifications { get; set; }

        [JsonProperty("versionInfo")]
        public LoginInfoVersionInfo VersionInfo { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("department")]
        public List<string> Department { get; set; }

        [JsonProperty("subdivision")]
        public string Subdivision { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("isRemoved")]
        public bool IsRemoved { get; set; }

        [JsonProperty("isAdmin")]
        public bool IsAdmin { get; set; }

        [JsonProperty("userGroups")]
        public List<string> UserGroups { get; set; }

        [JsonProperty("teamLead")]
        public string TeamLead { get; set; }

        [JsonProperty("team")]
        public List<object> Team { get; set; }

        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("genericEmail")]
        public string GenericEmail { get; set; }

        [JsonProperty("hashedPassword")]
        public string HashedPassword { get; set; }

        [JsonProperty("assignedLocation")]
        public string AssignedLocation { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("mobile")]
        public string Mobile { get; set; }

        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        [JsonProperty("userGroup")]
        public UserGroup UserGroup { get; set; }

        [JsonProperty("assignedLocationName")]
        public string AssignedLocationName { get; set; }

        [JsonProperty("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("tenantId")]
        public string TenantId { get; set; }

        [JsonProperty("__v")]
        public long V { get; set; }

        [JsonProperty("signature")]
        public Signature Signature { get; set; }
    }

    public partial class Signature
    {
        [JsonProperty("imgName")]
        public string ImgName { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("tag")]
        public string Tag { get; set; }

        [JsonProperty("md5")]
        public string Md5 { get; set; }
    }

    public partial class UserGroup
    {
        [JsonProperty("permissions")]
        public List<Permission> Permissions { get; set; }

        [JsonProperty("isAdmin")]
        public bool IsAdmin { get; set; }

        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }
    }

    public partial class Permission
    {
        [JsonProperty("resource")]
        public string Resource { get; set; }

        [JsonProperty("action")]
        public Action Action { get; set; }

        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class LoginInfoVersionInfo
    {
        [JsonProperty("value")]
        public Value Value { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("versionInfo")]
        public ValueVersionInfo VersionInfo { get; set; }

        [JsonProperty("appearance")]
        public Appearance Appearance { get; set; }

        [JsonProperty("featuresetList")]
        public List<FeaturesetList> FeaturesetList { get; set; }
    }

    public partial class Appearance
    {
        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("logo1")]
        public string Logo1 { get; set; }

        [JsonProperty("logo2")]
        public string Logo2 { get; set; }
    }

    public partial class FeaturesetList
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("subset")]
        public List<string> Subset { get; set; }
    }

    public partial class ValueVersionInfo
    {
        [JsonProperty("customer")]
        public string Customer { get; set; }

        [JsonProperty("applicationType")]
        public string ApplicationType { get; set; }

        [JsonProperty("compatibleMobileApps")]
        public string CompatibleMobileApps { get; set; }

        [JsonProperty("webVersion")]
        public string WebVersion { get; set; }

        [JsonProperty("migration")]
        public string Migration { get; set; }

        [JsonProperty("database")]
        public string Database { get; set; }
    }

    public enum Action { Read, View };

    public partial class LoginInfo
    {
        public static LoginInfo FromJson(string json) => JsonConvert.DeserializeObject<LoginInfo>(json, TekTrackingCore.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LoginInfo self) => JsonConvert.SerializeObject(self, TekTrackingCore.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ActionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ActionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Action) || t == typeof(Action?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "read":
                    return Action.Read;
                case "view":
                    return Action.View;
            }
            throw new Exception("Cannot unmarshal type Action");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Action)untypedValue;
            switch (value)
            {
                case Action.Read:
                    serializer.Serialize(writer, "read");
                    return;
                case Action.View:
                    serializer.Serialize(writer, "view");
                    return;
            }
            throw new Exception("Cannot marshal type Action");
        }

        public static readonly ActionConverter Singleton = new ActionConverter();
    }
}
